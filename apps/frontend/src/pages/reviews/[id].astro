---
export const prerender = false;

import MainLayout from '@/layouts/MainLayout.astro';
import ReviewDetailPage from '@/components/reviews/ReviewDetailPage';
import { getReviewById } from '@/services/reviews';
import type { ReviewResponse } from '@questlog/shared-types';

// ============================================================================
// Server-Side Data Fetching
// ============================================================================

const { id } = Astro.params;

// Validate id parameter
if (!id) {
  return Astro.redirect('/404');
}

let review: ReviewResponse | null = null;

try {
  // Fetch review from API
  review = await getReviewById(id);
} catch (err: any) {
  // Handle 404 - Review not found
  if (err.status === 404) {
    return new Response(null, {
      status: 404,
      statusText: 'Review not found',
    });
  }

  // Handle other errors
  console.error('Error fetching review:', err);
}

// If review fetch failed (and not 404), show error page
if (!review) {
  return new Response(null, {
    status: 500,
    statusText: 'Internal Server Error',
  });
}

// ============================================================================
// SEO Meta Tags
// ============================================================================

const pageTitle = `${review.title} - A review by ${review.user.username} | Questlog`;
const pageDescription = review.content 
  ? `${review.content.substring(0, 160)}...`
  : `Read ${review.user.username}'s review of ${review.game.title} with a rating of ${review.rating}/10.`;

// Open Graph image - prefer game cover or review image
const pageImage = review.game.coverImage || 
  `${Astro.site || Astro.url.origin}/og-review.png`;

// Canonical URL
const canonicalURL = new URL(`/reviews/${review.id}`, Astro.site || Astro.url.origin).toString();

// Format dates for structured data
const publishedDate = new Date(review.createdAt).toISOString();
const modifiedDate = new Date(review.updatedAt).toISOString();

// Structured data for rich results (Review schema)
const structuredData = {
  '@context': 'https://schema.org',
  '@type': 'Review',
  'itemReviewed': {
    '@type': 'VideoGame',
    'name': review.game.title,
    'image': review.game.coverImage,
  },
  'reviewRating': {
    '@type': 'Rating',
    'ratingValue': review.rating,
    'bestRating': 10,
    'worstRating': 0,
  },
  'name': review.title,
  'author': {
    '@type': 'Person',
    'name': review.user.displayName || review.user.username,
    'url': `${Astro.site || Astro.url.origin}/profile/${review.user.username}`,
  },
  'reviewBody': review.content,
  'datePublished': publishedDate,
  'dateModified': modifiedDate,
  'publisher': {
    '@type': 'Organization',
    'name': 'Questlog',
    'url': Astro.site || Astro.url.origin,
  },
  'url': canonicalURL,
  ...(review.isSpoiler && {
    'hasPart': {
      '@type': 'WebPageElement',
      'cssSelector': '.spoiler-content',
      'name': 'Spoiler Warning',
    }
  }),
};

// Additional article structured data
const articleStructuredData = {
  '@context': 'https://schema.org',
  '@type': 'Article',
  'headline': review.title,
  'image': pageImage,
  'author': {
    '@type': 'Person',
    'name': review.user.displayName || review.user.username,
    'url': `${Astro.site || Astro.url.origin}/profile/${review.user.username}`,
  },
  'datePublished': publishedDate,
  'dateModified': modifiedDate,
  'publisher': {
    '@type': 'Organization',
    'name': 'Questlog',
    'logo': {
      '@type': 'ImageObject',
      'url': `${Astro.site || Astro.url.origin}/logo.png`,
    },
  },
  'mainEntityOfPage': {
    '@type': 'WebPage',
    '@id': canonicalURL,
  },
  'description': pageDescription,
  'articleBody': review.content,
  'interactionStatistic': [
    {
      '@type': 'InteractionCounter',
      'interactionType': 'https://schema.org/LikeAction',
      'userInteractionCount': review.stats.likesCount,
    },
  ],
};

---

<MainLayout
  title={pageTitle}
  description={pageDescription}
  image={pageImage}
  canonicalURL={canonicalURL}
  noIndex={!review.isPublished}
>
  <!-- Structured Data - Review Schema -->
  <script type="application/ld+json" set:html={JSON.stringify(structuredData)} />
  
  <!-- Structured Data - Article Schema -->
  <script type="application/ld+json" set:html={JSON.stringify(articleStructuredData)} />

  <!-- Review Detail Page Content -->
  <ReviewDetailPage 
    review={review}
    client:load
  />
</MainLayout>
